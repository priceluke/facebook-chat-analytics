# -*- coding: utf-8 -*-
"""Facebook Analytics

Automatically generated by Colaboratory.

Original file is located at

# **`Facebook Chat Analytics`**



1.   Go to `https://www.facebook.com/dyi/` and request your information. Be sure to save it as JSON and select messenger only to keep file sizes down and allow it to be compatible with this project. 
2.   Then create a folder in your Google Drive and place all the chat files inside.
3.   Run the program and find **Analytics.pptx**

# Add the path to the directory which stores the chat json files
"""

###### CONFIGURATION ###################
                                       #
PATH_TO_JSON_DIR = '/boys_groupchat'   #
                                       #
########################################

"""# Mount your Google Drive and install requirements"""

from google.colab import drive
drive.mount('/content/drive')
!pip install python-pptx

"""# Run the following code cell to generate data about your groupchat"""

import json
import math
import glob, os
from enum import Enum
import base64
from pprint import pprint
import time
import matplotlib.pyplot as plt; plt.rcdefaults()
import numpy as np
import matplotlib.pyplot as plt
###############
hall_of_fame = {}
###############
class Stats:
  def  __init__ (self):
    self.msg_count = 0
    self.recv_reacts = {}
    self.giv_reacts = {}
    self.photos = 0
    self.tod = []

  msg_count = 0
  recv_reacts = {}
  giv_reacts = {}
  photos = 0
  tod = []
################
thebois = {}
################
os.chdir('/content/drive/My Drive' + PATH_TO_JSON_DIR)
for file in glob.glob("*.json"):
    with open(file) as json_file:
      data = json.load(json_file)
      for p in data['messages']:
        stats= thebois.get(p["sender_name"], Stats())
        stats.msg_count += 1
        timestamp = time.gmtime(math.floor(int(p["timestamp_ms"])/1000))

        hr = timestamp[3]
        min = (timestamp[4] / 60)

        stats.tod.append(math.floor(hr))

        if 'photos' in p:
          if len(p["photos"]) > 0:
            stats.photos += len(p["photos"])
        if 'reactions' in p:
          if len(p["reactions"]) > 0:
            if len(list(hall_of_fame.values())) == 0:
              hall_of_fame[p["timestamp_ms"]] = p
            elif len(list(hall_of_fame.values())[0]["reactions"]) < len(p["reactions"]):
              hall_of_fame = {}
              hall_of_fame[p["timestamp_ms"]] = p
            elif len(list(hall_of_fame.values())[0]["reactions"]) == len(p["reactions"]):
              hall_of_fame[p["timestamp_ms"]] = p
            for reaction in p["reactions"]:
              react = stats.recv_reacts.get(reaction["reaction"],0)
              react += 1
              stats.recv_reacts[reaction["reaction"]] = react

              reactee_stats = thebois.get(reaction['actor'], Stats())
              giv_react = reactee_stats.giv_reacts.get(reaction["reaction"],0)
              giv_react += 1
              reactee_stats.giv_reacts[reaction["reaction"]] = giv_react

        thebois[p["sender_name"]] = stats

###############
# UGLY OUTPUT #
###############
for boi in (thebois):
  print(boi + ":")
  print("  Messages : " + str(thebois[boi].msg_count))
  print("  Photos   :   " + str(thebois[boi].photos))
  print("  Reactions Recieved: ")
  for react in sorted(thebois[boi].recv_reacts.keys()):
    print("     " + str(react.encode('latin1').decode('utf8')) +  ": " + str(thebois[boi].recv_reacts[react]))
  print("  Reactions Given: ")
  for react in sorted(thebois[boi].giv_reacts.keys()):
      print("     " + str(react.encode('latin1').decode('utf8')) +  ": " + str(thebois[boi].giv_reacts[react]))
  np.random.seed(19380801)
  points = {}
  for i in range (0,math.ceil(max(thebois[boi].tod))):
    points[str(i)] = 0
  for time in thebois[boi].tod:
      freq = points.get(str(time),0)
      freq += 1
      points[str(time)] = freq
  x =  points.keys()
  y_pos = points.values()
  plt.bar(x,y_pos, align='center', alpha=0.5)
  plt.ylabel('Message Count')
  plt.xlabel('Hour')
  plt.title(boi)

  plt.show()


###################################
print("Hall of Fame:")
print("------------------")
for topmessage in hall_of_fame:
  print(hall_of_fame[topmessage]["sender_name"] + " with " + str(len(hall_of_fame[topmessage]["reactions"])) + ":")
  if "content" in hall_of_fame[topmessage]:
    print (hall_of_fame[topmessage]["content"])
  else:
    print (hall_of_fame[topmessage]["photos"])
  print("------------------")

###################################

"""# Run the following cell to output the analytics for the chat as a Powerpoint

### It will be saved in the folder given by

```
PATH_TO_JSON_DIR = 
```
 ### Named: **Analytics.pptx**
"""

from pptx import Presentation
from pptx.util import Inches, Pt

prs = Presentation()
title_slide_layout = prs.slide_layouts[0]

#### TITLE PAGE
slide = prs.slides.add_slide(title_slide_layout)
title = slide.shapes.title
subtitle = slide.placeholders[1]


title.text = "Facebook Chat Analytics"
msg_sum = 0
for boi in (thebois):
  msg_sum += thebois[boi].msg_count

subtitle.text = str('{:,}'.format(msg_sum) + " messages sent")
#### HALL OF FAME INTRO
hall_of_fame_slide = prs.slides.add_slide(title_slide_layout)
title = hall_of_fame_slide.shapes.title
subtitle = hall_of_fame_slide.placeholders[1]


title.text = "Hall of Fame"

subtitle.text = str(len(hall_of_fame)) + " messages made it into to the hall of fame"

#### HALL OF FAME
for topmessage in hall_of_fame:
  hall_of_fame_slide = prs.slides.add_slide(title_slide_layout)
  title = hall_of_fame_slide.shapes.title
  subtitle = hall_of_fame_slide.placeholders[1]

  if "content" in hall_of_fame[topmessage]:
    title.text = hall_of_fame[topmessage]["sender_name"] + " with " + str(len(hall_of_fame[topmessage]["reactions"])) + " reactions"
    subtitle.text = hall_of_fame[topmessage]["content"]
  else:
    title.text = hall_of_fame[topmessage]["sender_name"] + " with " + str(len(hall_of_fame[topmessage]["reactions"])) + " reactions"
    subtitle.text = hall_of_fame[topmessage]["photos"][0]["uri"]
    
#### THE BOIS

for boi in (thebois):
  bullet_slide_layout = prs.slide_layouts[3]

  slide = prs.slides.add_slide(bullet_slide_layout)
  shapes = slide.shapes

  title_shape = shapes.title
  title_shape.text = boi

  body_shape = shapes.placeholders[1]
  tf = body_shape.text_frame
  p = tf.add_paragraph()
  p.text = "Messages:   " + str(thebois[boi].msg_count)
  p = tf.add_paragraph()
  p.text = "Reactions Recieved:     "
  for react in sorted(thebois[boi].recv_reacts.keys()):
      p = tf.add_paragraph()
      p.level = 2
      p.text = str(react.encode('latin1').decode('utf8')) +  ": " + str(thebois[boi].recv_reacts[react])
  body_shape = shapes.placeholders[2]
  tf = body_shape.text_frame
  p = tf.add_paragraph()
  p.text = "Photos:     " + str(thebois[boi].photos)
  p = tf.add_paragraph()
  p.text = "Reactions Given:     "
  for react in sorted(thebois[boi].giv_reacts.keys()):
      p = tf.add_paragraph()
      p.level = 2
      p.text = str(react.encode('latin1').decode('utf8')) +  ": " + str(thebois[boi].giv_reacts[react])
  np.random.seed(19380801)
  points = {}
  for i in range (0,math.ceil(max(thebois[boi].tod))):
    points[str(i)] = 0
  for time in thebois[boi].tod:
      freq = points.get(str(time),0)
      freq += 1
      points[str(time)] = freq
  x =  points.keys()
  y_pos = points.values()
  plt.bar(x,y_pos, align='center', alpha=0.5)
  plt.ylabel('Message Count')
  plt.xlabel('Hour')
  plt.title(boi)

  plt.savefig(boi)
  plt.show()
  bullet_slide_layout = prs.slide_layouts[6]

  slide = prs.slides.add_slide(bullet_slide_layout)
  shapes = slide.shapes

  title_shape = shapes.title
  tf = body_shape.text_frame
  image = shapes.add_picture(boi + ".png", Inches(1.5), Inches(1.5))
  image.left = math.ceil((prs.slide_width - image.width) / 2)
  image.top = math.ceil((prs.slide_height - image.height) / 2)


####
prs.save('Analytics.pptx')

"""By Luke Price - UoSurrey"""
